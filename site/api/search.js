window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "coproc", "modulename": "coproc", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.baseworkerprocess", "modulename": "coproc.baseworkerprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.baseworkerprocess.BaseWorkerProcess", "modulename": "coproc.baseworkerprocess", "qualname": "BaseWorkerProcess", "kind": "class", "doc": "<p>Base class with constructor that accepts a priority messenger.\nYou may use this when creating minimal process functions.</p>\n"}, {"fullname": "coproc.baseworkerprocess.BaseWorkerProcess.__init__", "modulename": "coproc.baseworkerprocess", "qualname": "BaseWorkerProcess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">messenger</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span></span>)</span>"}, {"fullname": "coproc.baseworkerprocess.BaseWorkerProcess.messenger", "modulename": "coproc.baseworkerprocess", "qualname": "BaseWorkerProcess.messenger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.prioritymessenger.PriorityMessenger"}, {"fullname": "coproc.lazypool", "modulename": "coproc.lazypool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.lazypool", "modulename": "coproc.lazypool.lazypool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.lazypool.LazyPool", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.__init__", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.pool", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.pool", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.start_kwargs", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.start_kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.map", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.map", "kind": "function", "doc": "<p>Get results in order as a list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">datas</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.map_unordered", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.map_unordered", "kind": "function", "doc": "<p>Get results as they are returned by the worker processes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">datas</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">chunksize</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[RecvPayloadType]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.chunk_size_slice", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.chunk_size_slice", "kind": "function", "doc": "<p>Break elements into chunks of size chunk_size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">chunk_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.List[Iterable]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.wait_until_dead", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.wait_until_dead", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.lazypool.lazypool.LazyPool.is_alive", "modulename": "coproc.lazypool.lazypool", "qualname": "LazyPool.is_alive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.lazypool.staticmapprocess", "modulename": "coproc.lazypool.staticmapprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.staticmapprocess.SliceMessage", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "SliceMessage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.staticmapprocess.SliceMessage.__init__", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "SliceMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ind</span><span class=\"p\">:</span> <span class=\"nb\">slice</span></span>)</span>"}, {"fullname": "coproc.lazypool.staticmapprocess.SliceMessage.ind", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "SliceMessage.ind", "kind": "variable", "doc": "<p></p>\n", "annotation": ": slice"}, {"fullname": "coproc.lazypool.staticmapprocess.MapResultMessage", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "MapResultMessage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.staticmapprocess.MapResultMessage.__init__", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "MapResultMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ind</span><span class=\"p\">:</span> <span class=\"nb\">slice</span>, </span><span class=\"param\"><span class=\"n\">results</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span></span>)</span>"}, {"fullname": "coproc.lazypool.staticmapprocess.MapResultMessage.ind", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "MapResultMessage.ind", "kind": "variable", "doc": "<p></p>\n", "annotation": ": slice"}, {"fullname": "coproc.lazypool.staticmapprocess.MapResultMessage.results", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "MapResultMessage.results", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~SendPayloadType"}, {"fullname": "coproc.lazypool.staticmapprocess.MapResultMessage.start", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "MapResultMessage.start", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.lazypool.staticmapprocess.StaticMapProcess", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "StaticMapProcess", "kind": "class", "doc": "<p>Stores items at init and receives slice messages .</p>\n", "bases": "coproc.baseworkerprocess.BaseWorkerProcess, typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.lazypool.staticmapprocess.StaticMapProcess.worker_target", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "StaticMapProcess.worker_target", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[~SendPayloadType], ~RecvPayloadType]"}, {"fullname": "coproc.lazypool.staticmapprocess.StaticMapProcess.items", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "StaticMapProcess.items", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[~SendPayloadType]"}, {"fullname": "coproc.lazypool.staticmapprocess.StaticMapProcess.verbose", "modulename": "coproc.lazypool.staticmapprocess", "qualname": "StaticMapProcess.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "coproc.messenger", "modulename": "coproc.messenger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.exceptions", "modulename": "coproc.messenger.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.exceptions.MessageNotRecognizedError", "modulename": "coproc.messenger.exceptions", "qualname": "MessageNotRecognizedError", "kind": "class", "doc": "<p>Common base class for all exceptions</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.messenger.exceptions.ResourceRequestedClose", "modulename": "coproc.messenger.exceptions", "qualname": "ResourceRequestedClose", "kind": "class", "doc": "<p>Common base class for all exceptions</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.messenger.messages", "modulename": "coproc.messenger.messages", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.messages.Message", "modulename": "coproc.messenger.messages", "qualname": "Message", "kind": "class", "doc": "<p>Base class for messages containing priority comparisons.</p>\n"}, {"fullname": "coproc.messenger.messages.Message.priority", "modulename": "coproc.messenger.messages", "qualname": "Message.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.messenger.messages.Message.mtype", "modulename": "coproc.messenger.messages", "qualname": "Message.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageType"}, {"fullname": "coproc.messenger.messages.Message.channel_id", "modulename": "coproc.messenger.messages", "qualname": "Message.channel_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.queue.multiqueue.ChannelID"}, {"fullname": "coproc.messenger.messages.MessageType", "modulename": "coproc.messenger.messages", "qualname": "MessageType", "kind": "class", "doc": "<p>Create a collection of name/value pairs.</p>\n\n<p>Example enumeration:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">RED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">BLUE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>    <span class=\"n\">GREEN</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n\n<p>Access them by:</p>\n\n<ul>\n<li>attribute access::</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>value lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>name lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;RED&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<p>Enumerations can be iterated over, and know how many members they have:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Color.RED: 1&gt;, &lt;Color.BLUE: 2&gt;, &lt;Color.GREEN: 3&gt;]</span>\n</code></pre>\n</div>\n\n<p>Methods can be added to enumerations, and members can have their own\nattributes -- see the documentation for details.</p>\n", "bases": "enum.Enum"}, {"fullname": "coproc.messenger.messages.MessageType.DATA_PAYLOAD", "modulename": "coproc.messenger.messages", "qualname": "MessageType.DATA_PAYLOAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageType.DATA_PAYLOAD: 1&gt;"}, {"fullname": "coproc.messenger.messages.MessageType.CLOSE_REQUEST", "modulename": "coproc.messenger.messages", "qualname": "MessageType.CLOSE_REQUEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageType.CLOSE_REQUEST: 2&gt;"}, {"fullname": "coproc.messenger.messages.MessageType.ENCOUNTERED_ERROR", "modulename": "coproc.messenger.messages", "qualname": "MessageType.ENCOUNTERED_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageType.ENCOUNTERED_ERROR: 3&gt;"}, {"fullname": "coproc.messenger.messages.CloseRequestMessage", "modulename": "coproc.messenger.messages", "qualname": "CloseRequestMessage", "kind": "class", "doc": "<p>Request that the other end of the pipe close.</p>\n", "bases": "Message"}, {"fullname": "coproc.messenger.messages.CloseRequestMessage.__init__", "modulename": "coproc.messenger.messages", "qualname": "CloseRequestMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageType</span><span class=\"o\">.</span><span class=\"n\">CLOSE_REQUEST</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.CloseRequestMessage.priority", "modulename": "coproc.messenger.messages", "qualname": "CloseRequestMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-inf"}, {"fullname": "coproc.messenger.messages.CloseRequestMessage.mtype", "modulename": "coproc.messenger.messages", "qualname": "CloseRequestMessage.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageType", "default_value": "&lt;MessageType.CLOSE_REQUEST: 2&gt;"}, {"fullname": "coproc.messenger.messages.EncounteredErrorMessage", "modulename": "coproc.messenger.messages", "qualname": "EncounteredErrorMessage", "kind": "class", "doc": "<p></p>\n", "bases": "Message"}, {"fullname": "coproc.messenger.messages.EncounteredErrorMessage.__init__", "modulename": "coproc.messenger.messages", "qualname": "EncounteredErrorMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageType</span><span class=\"o\">.</span><span class=\"n\">ENCOUNTERED_ERROR</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.EncounteredErrorMessage.exception", "modulename": "coproc.messenger.messages", "qualname": "EncounteredErrorMessage.exception", "kind": "variable", "doc": "<p></p>\n", "annotation": ": BaseException"}, {"fullname": "coproc.messenger.messages.EncounteredErrorMessage.priority", "modulename": "coproc.messenger.messages", "qualname": "EncounteredErrorMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-inf"}, {"fullname": "coproc.messenger.messages.EncounteredErrorMessage.mtype", "modulename": "coproc.messenger.messages", "qualname": "EncounteredErrorMessage.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageType", "default_value": "&lt;MessageType.ENCOUNTERED_ERROR: 3&gt;"}, {"fullname": "coproc.messenger.messages.DataMessage", "modulename": "coproc.messenger.messages", "qualname": "DataMessage", "kind": "class", "doc": "<p>Send generic data to the other end of the pipe, using priority of sent messsage.\nNOTE: this is designed to allow users to access benefits of user-defined queue.</p>\n", "bases": "Message"}, {"fullname": "coproc.messenger.messages.DataMessage.__init__", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">request_reply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">is_reply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageType</span><span class=\"o\">.</span><span class=\"n\">DATA_PAYLOAD</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.DataMessage.payload", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Union[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.messenger.messages.DataMessage.request_reply", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.request_reply", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.messenger.messages.DataMessage.is_reply", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.is_reply", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.messenger.messages.DataMessage.channel_id", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.channel_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.queue.multiqueue.ChannelID"}, {"fullname": "coproc.messenger.messages.DataMessage.mtype", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageType", "default_value": "&lt;MessageType.DATA_PAYLOAD: 1&gt;"}, {"fullname": "coproc.messenger.messages.DataMessage.priority", "modulename": "coproc.messenger.messages", "qualname": "DataMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.messenger.messages.MessageToProcessType", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcessType", "kind": "class", "doc": "<p>Create a collection of name/value pairs.</p>\n\n<p>Example enumeration:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">RED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">BLUE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>    <span class=\"n\">GREEN</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n\n<p>Access them by:</p>\n\n<ul>\n<li>attribute access::</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>value lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>name lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;RED&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<p>Enumerations can be iterated over, and know how many members they have:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Color.RED: 1&gt;, &lt;Color.BLUE: 2&gt;, &lt;Color.GREEN: 3&gt;]</span>\n</code></pre>\n</div>\n\n<p>Methods can be added to enumerations, and members can have their own\nattributes -- see the documentation for details.</p>\n", "bases": "enum.Enum"}, {"fullname": "coproc.messenger.messages.MessageToProcessType.SUBMIT_DATA", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcessType.SUBMIT_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageToProcessType.SUBMIT_DATA: 1&gt;"}, {"fullname": "coproc.messenger.messages.MessageToProcessType.CLOSE", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcessType.CLOSE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageToProcessType.CLOSE: 2&gt;"}, {"fullname": "coproc.messenger.messages.MessageToProcess", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcess", "kind": "class", "doc": "<p>Base class for messages containing priority comparisons.</p>\n", "bases": "Message"}, {"fullname": "coproc.messenger.messages.MessageToProcess.priority", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcess.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.messenger.messages.MessageToProcess.mtype", "modulename": "coproc.messenger.messages", "qualname": "MessageToProcess.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageToProcessType"}, {"fullname": "coproc.messenger.messages.Close", "modulename": "coproc.messenger.messages", "qualname": "Close", "kind": "class", "doc": "<p></p>\n", "bases": "MessageToProcess"}, {"fullname": "coproc.messenger.messages.Close.__init__", "modulename": "coproc.messenger.messages", "qualname": "Close.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageToProcessType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageToProcessType</span><span class=\"o\">.</span><span class=\"n\">CLOSE</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.Close.priority", "modulename": "coproc.messenger.messages", "qualname": "Close.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-inf"}, {"fullname": "coproc.messenger.messages.Close.mtype", "modulename": "coproc.messenger.messages", "qualname": "Close.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageToProcessType", "default_value": "&lt;MessageToProcessType.CLOSE: 2&gt;"}, {"fullname": "coproc.messenger.messages.SubmitData", "modulename": "coproc.messenger.messages", "qualname": "SubmitData", "kind": "class", "doc": "<p></p>\n", "bases": "MessageToProcess"}, {"fullname": "coproc.messenger.messages.SubmitData.__init__", "modulename": "coproc.messenger.messages", "qualname": "SubmitData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageToProcessType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageToProcessType</span><span class=\"o\">.</span><span class=\"n\">SUBMIT_DATA</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.SubmitData.payload", "modulename": "coproc.messenger.messages", "qualname": "SubmitData.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~SendPayloadType"}, {"fullname": "coproc.messenger.messages.SubmitData.mtype", "modulename": "coproc.messenger.messages", "qualname": "SubmitData.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageToProcessType", "default_value": "&lt;MessageToProcessType.SUBMIT_DATA: 1&gt;"}, {"fullname": "coproc.messenger.messages.SubmitData.priority", "modulename": "coproc.messenger.messages", "qualname": "SubmitData.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.messenger.messages.MessageFromProcessType", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcessType", "kind": "class", "doc": "<p>Create a collection of name/value pairs.</p>\n\n<p>Example enumeration:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Color</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">RED</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">... </span>    <span class=\"n\">BLUE</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"gp\">... </span>    <span class=\"n\">GREEN</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n\n<p>Access them by:</p>\n\n<ul>\n<li>attribute access::</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"o\">.</span><span class=\"n\">RED</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>value lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<ul>\n<li>name lookup:</li>\n</ul>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Color</span><span class=\"p\">[</span><span class=\"s1\">&#39;RED&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;Color.RED: 1&gt;</span>\n</code></pre>\n</div>\n\n<p>Enumerations can be iterated over, and know how many members they have:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">3</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Color</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Color.RED: 1&gt;, &lt;Color.BLUE: 2&gt;, &lt;Color.GREEN: 3&gt;]</span>\n</code></pre>\n</div>\n\n<p>Methods can be added to enumerations, and members can have their own\nattributes -- see the documentation for details.</p>\n", "bases": "enum.Enum"}, {"fullname": "coproc.messenger.messages.MessageFromProcessType.REPLY_DATA", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcessType.REPLY_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageFromProcessType.REPLY_DATA: 1&gt;"}, {"fullname": "coproc.messenger.messages.MessageFromProcessType.USERFUNC_ERROR", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcessType.USERFUNC_ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;MessageFromProcessType.USERFUNC_ERROR: 2&gt;"}, {"fullname": "coproc.messenger.messages.MessageFromProcess", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcess", "kind": "class", "doc": "<p>Base class for messages containing priority comparisons.</p>\n", "bases": "Message"}, {"fullname": "coproc.messenger.messages.MessageFromProcess.priority", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcess.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.messenger.messages.MessageFromProcess.mtype", "modulename": "coproc.messenger.messages", "qualname": "MessageFromProcess.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageFromProcessType"}, {"fullname": "coproc.messenger.messages.UserfuncError", "modulename": "coproc.messenger.messages", "qualname": "UserfuncError", "kind": "class", "doc": "<p></p>\n", "bases": "MessageFromProcess"}, {"fullname": "coproc.messenger.messages.UserfuncError.__init__", "modulename": "coproc.messenger.messages", "qualname": "UserfuncError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">inf</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageFromProcessType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageFromProcessType</span><span class=\"o\">.</span><span class=\"n\">USERFUNC_ERROR</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.UserfuncError.exception", "modulename": "coproc.messenger.messages", "qualname": "UserfuncError.exception", "kind": "variable", "doc": "<p></p>\n", "annotation": ": BaseException"}, {"fullname": "coproc.messenger.messages.UserfuncError.priority", "modulename": "coproc.messenger.messages", "qualname": "UserfuncError.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "-inf"}, {"fullname": "coproc.messenger.messages.UserfuncError.mtype", "modulename": "coproc.messenger.messages", "qualname": "UserfuncError.mtype", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.messages.MessageFromProcessType", "default_value": "&lt;MessageFromProcessType.USERFUNC_ERROR: 2&gt;"}, {"fullname": "coproc.messenger.messages.ReplyData", "modulename": "coproc.messenger.messages", "qualname": "ReplyData", "kind": "class", "doc": "<p></p>\n", "bases": "MessageFromProcess, typing.Generic[~RecvPayloadType]"}, {"fullname": "coproc.messenger.messages.ReplyData.__init__", "modulename": "coproc.messenger.messages", "qualname": "ReplyData.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">mtype</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">MessageFromProcessType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageFromProcessType</span><span class=\"o\">.</span><span class=\"n\">REPLY_DATA</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.messages.ReplyData.payload", "modulename": "coproc.messenger.messages", "qualname": "ReplyData.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~RecvPayloadType"}, {"fullname": "coproc.messenger.multimessenger", "modulename": "coproc.messenger.multimessenger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger", "kind": "class", "doc": "<p>Follows PriorityMessenger but does not use priority.\nImportantly, this precludes the possibility of</p>\n", "bases": "typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.__init__", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pipe</span><span class=\"p\">:</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">Connection</span>,</span><span class=\"param\">\t<span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">MultiQueue</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">request_ctr</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">requestctr</span><span class=\"o\">.</span><span class=\"n\">RequestCtr</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.pipe", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.pipe", "kind": "variable", "doc": "<p></p>\n", "annotation": ": multiprocessing.connection.Connection"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.queue", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.queue.multiqueue.MultiQueue[coproc.messenger.messages.Message]"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.request_ctr", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.request_ctr", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.requestctr.RequestCtr"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.new_pair", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.new_pair", "kind": "function", "doc": "<p>Return (process, resource) pair of messengers connected by a duplex pipe.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">multimessenger</span><span class=\"o\">.</span><span class=\"n\">MultiMessenger</span><span class=\"p\">,</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">multimessenger</span><span class=\"o\">.</span><span class=\"n\">MultiMessenger</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_request_multiple", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_request_multiple", "kind": "function", "doc": "<p>Blocking send of multiple data to pipe.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_request", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_request", "kind": "function", "doc": "<p>Send data that requires a reply.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_reply", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_reply", "kind": "function", "doc": "<p>Send data that acts as a reply to a request.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_norequest", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_norequest", "kind": "function", "doc": "<p>Send data that does not requre a reply.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_data_message", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_data_message", "kind": "function", "doc": "<p>Send data message.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>,</span><span class=\"param\">\t<span class=\"n\">request_reply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">is_reply</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_close_request", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_close_request", "kind": "function", "doc": "<p>Blocking send of close message to pipe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.send_error", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.send_error", "kind": "function", "doc": "<p>Blocking send of close message to pipe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exception</span><span class=\"p\">:</span> <span class=\"ne\">BaseException</span>, </span><span class=\"param\"><span class=\"n\">print_trace</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_remaining", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_remaining", "kind": "function", "doc": "<p>Receive until the requested number of results have been received.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[RecvPayloadType]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_remaining_messages", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_remaining_messages", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[DataMessage]&#39;</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_blocking", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_blocking", "kind": "function", "doc": "<p>Blocking receive payload from next data message of this channel.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_available", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_available", "kind": "function", "doc": "<p>Receive currently available messanges.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_available_messages", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_available_messages", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">DataMessage</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.pop_from_queue", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.pop_from_queue", "kind": "function", "doc": "<p>Pop the next item from the queue.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.receive_message_blocking", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.receive_message_blocking", "kind": "function", "doc": "<p>Receive until receiving a message with the given channel, then return it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">DataMessage</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.available", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.available", "kind": "function", "doc": "<p>Number of data available in pipe at this time.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.await_available", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.await_available", "kind": "function", "doc": "<p>Wait until at least one message is received on any channel and placed into queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.remaining", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.remaining", "kind": "function", "doc": "<p>Number of results requested but not received.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.replies_received", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.replies_received", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.requests_sent", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.requests_sent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.messages_sent", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.messages_sent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.messages_received", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.messages_received", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.queue_size", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.queue_size", "kind": "function", "doc": "<p>Current size of queue.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.multimessenger.MultiMessenger.pipe_poll", "modulename": "coproc.messenger.multimessenger", "qualname": "MultiMessenger.pipe_poll", "kind": "function", "doc": "<p>Check if any items are in the pipe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.prioritymessenger", "modulename": "coproc.messenger.prioritymessenger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.prioritymessenger.PriorityMessenger", "modulename": "coproc.messenger.prioritymessenger", "qualname": "PriorityMessenger", "kind": "class", "doc": "<p>Handles messaging to/from a multiprocessing pipe with prioritization and message channels.</p>\n", "bases": "coproc.messenger.multimessenger.MultiMessenger, typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.messenger.queue", "modulename": "coproc.messenger.queue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.queue.basicqueue", "modulename": "coproc.messenger.queue.basicqueue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue", "kind": "class", "doc": "<p>Wrapper for collections.dequeue</p>\n", "bases": "typing.Generic[~ItemType]"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.__init__", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">queue</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">deque</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ItemType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.queue", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.deque[~ItemType]"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.get", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ItemType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.put", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.put", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">ItemType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.empty", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.basicqueue.BasicQueue.size", "modulename": "coproc.messenger.queue.basicqueue", "qualname": "BasicQueue.size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.multiqueue", "modulename": "coproc.messenger.queue.multiqueue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.queue.multiqueue.ChannelID", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "ChannelID", "kind": "class", "doc": "<p>Abstract base class for generic types.</p>\n\n<p>A generic type is typically declared by inheriting from\nthis class parameterized with one or more type variables.\nFor example, a generic mapping type might be defined as::</p>\n\n<p>class Mapping(Generic[KT, VT]):\n      def __getitem__(self, key: KT) -> VT:\n          ...\n      # Etc.</p>\n\n<p>This class can then be used as follows::</p>\n\n<p>def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT:\n      try:\n          return mapping[key]\n      except KeyError:\n          return default</p>\n", "bases": "typing.Hashable"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue", "kind": "class", "doc": "<p>Similar to priority messenger, but does not include priority.</p>\n", "bases": "typing.Generic[~ItemType]"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.__init__", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">queues</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Hashable</span><span class=\"p\">,</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">basicqueue</span><span class=\"o\">.</span><span class=\"n\">BasicQueue</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ItemType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.queues", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.queues", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[Hashable, coproc.messenger.queue.basicqueue.BasicQueue[~ItemType]]"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.get", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.get", "kind": "function", "doc": "<p>Get the next item from the queue.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ItemType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.put", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.put", "kind": "function", "doc": "<p>Put a new item on the queue.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">ItemType</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.empty", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.multiqueue.MultiQueue.size", "modulename": "coproc.messenger.queue.multiqueue", "qualname": "MultiQueue.size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.prioritymultiqueue", "modulename": "coproc.messenger.queue.prioritymultiqueue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.queue.prioritymultiqueue.PriorityMultiQueue", "modulename": "coproc.messenger.queue.prioritymultiqueue", "qualname": "PriorityMultiQueue", "kind": "class", "doc": "<p>Wraps multiple queues that each handle separate channels.</p>\n", "bases": "coproc.messenger.queue.multiqueue.MultiQueue, typing.Generic[~ItemType]"}, {"fullname": "coproc.messenger.queue.priorityqueue", "modulename": "coproc.messenger.queue.priorityqueue", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue", "kind": "class", "doc": "<p></p>\n", "bases": "typing.Generic[~ItemType]"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.__init__", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">queues</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">deque</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">ItemType</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">current_priority</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ct</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.queues", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.queues", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[float, collections.deque[~ItemType]]"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.current_priority", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.current_priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[float]", "default_value": "None"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.ct", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.ct", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.put", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.put", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">ItemType</span>, </span><span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.get", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.get", "kind": "function", "doc": "<p>Get next item in queue. Raises IndexError if empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">ItemType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.current_queue", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.current_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.deque"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.empty", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.empty", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.queue.priorityqueue.PriorityQueue.size", "modulename": "coproc.messenger.queue.priorityqueue", "qualname": "PriorityQueue.size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr", "modulename": "coproc.messenger.requestctr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.messenger.requestctr.RequestCtr", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr", "kind": "class", "doc": "<p>Counter stats for messages.</p>\n"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.__init__", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">requests</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Counter</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">replies</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Counter</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sent</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Counter</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">received</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">Counter</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.requests", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.requests", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.Counter[coproc.messenger.queue.multiqueue.ChannelID]"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.replies", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.replies", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.Counter[coproc.messenger.queue.multiqueue.ChannelID]"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.sent", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.sent", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.Counter[coproc.messenger.queue.multiqueue.ChannelID]"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.received", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.received", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.Counter[coproc.messenger.queue.multiqueue.ChannelID]"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.remaining", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.remaining", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.replies_received", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.replies_received", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.requests_sent", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.requests_sent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.messages_sent", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.messages_sent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.messages_received", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.messages_received", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.sent_request", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.sent_request", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.received_reply", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.received_reply", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.sent_message", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.sent_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.messenger.requestctr.RequestCtr.received_message", "modulename": "coproc.messenger.requestctr", "qualname": "RequestCtr.received_message", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor", "modulename": "coproc.monitor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitor", "modulename": "coproc.monitor.monitor", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitor.Monitor", "modulename": "coproc.monitor.monitor", "qualname": "Monitor", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitor.Monitor.__init__", "modulename": "coproc.monitor.monitor", "qualname": "Monitor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pid</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.25</span>,</span><span class=\"param\">\t<span class=\"n\">include_children</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">log_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fig_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_fig_freq</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;forkserver&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;spawn&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fork&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "coproc.monitor.monitor.Monitor.start_kwargs", "modulename": "coproc.monitor.monitor", "qualname": "Monitor.start_kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitor.Monitor.res", "modulename": "coproc.monitor.monitor", "qualname": "Monitor.res", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitormessenger", "modulename": "coproc.monitor.monitormessenger", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage", "kind": "class", "doc": "<p>Send generic data to the other end of the pipe, using priority of sent messsage.\nNOTE: this is designed to allow users to access benefits of user-defined queue.</p>\n", "bases": "MonitorMessage"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">do_log</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">do_label</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">ts</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.note", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.note", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.details", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.details", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.do_log", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.do_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.do_label", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.do_label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.ts", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "coproc.monitor.monitormessenger.SubmitNoteMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "SubmitNoteMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.monitor.monitormessenger.RequestStatsMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestStatsMessage", "kind": "class", "doc": "<p>Host requests stats from worker.</p>\n", "bases": "MonitorMessage"}, {"fullname": "coproc.monitor.monitormessenger.RequestStatsMessage.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestStatsMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.RequestStatsMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestStatsMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.monitor.monitormessenger.StatsDataMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "StatsDataMessage", "kind": "class", "doc": "<p>Worker sends collected data to host process.</p>\n", "bases": "MonitorMessage"}, {"fullname": "coproc.monitor.monitormessenger.StatsDataMessage.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "StatsDataMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">statsresult</span><span class=\"o\">.</span><span class=\"n\">StatsResult</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.StatsDataMessage.result", "modulename": "coproc.monitor.monitormessenger", "qualname": "StatsDataMessage.result", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.monitor.statsresult.StatsResult"}, {"fullname": "coproc.monitor.monitormessenger.StatsDataMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "StatsDataMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage", "kind": "class", "doc": "<p>Host requests worker to save figure.</p>\n", "bases": "MonitorMessage"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_notes</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">save_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.fname", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.fname", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.include_notes", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.include_notes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.font_size", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.font_size", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.save_kwargs", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.save_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "coproc.monitor.monitormessenger.RequestSaveMemoryFigureMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "RequestSaveMemoryFigureMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.monitor.monitormessenger.UpdateChildProcessesMessage", "modulename": "coproc.monitor.monitormessenger", "qualname": "UpdateChildProcessesMessage", "kind": "class", "doc": "<p>Worker requests host to identify child processes.</p>\n", "bases": "MonitorMessage"}, {"fullname": "coproc.monitor.monitormessenger.UpdateChildProcessesMessage.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "UpdateChildProcessesMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.UpdateChildProcessesMessage.priority", "modulename": "coproc.monitor.monitormessenger", "qualname": "UpdateChildProcessesMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface", "kind": "class", "doc": "<p>Host-side interface for managing messages to/from worker process.</p>\n"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.__init__", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">messenger</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span></span>)</span>"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.messenger", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.messenger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.prioritymessenger.PriorityMessenger"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.print", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.print", "kind": "function", "doc": "<p>Prints and adds to log but does not label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.label", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.label", "kind": "function", "doc": "<p>Labels and adds to log but does not print.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.log", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.log", "kind": "function", "doc": "<p>Saves to log but does not print or label.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.add_note", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.add_note", "kind": "function", "doc": "<p>Send note to monitor.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">do_log</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">do_label</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">do_print</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.save_memory_plot", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.save_memory_plot", "kind": "function", "doc": "<p>Request that monitor process save memory usage plot</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">include_notes</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">save_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.get_stats", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.get_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">statsresult</span><span class=\"o\">.</span><span class=\"n\">StatsResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitormessenger.MonitorMessengerInterface.update_child_processes", "modulename": "coproc.monitor.monitormessenger", "qualname": "MonitorMessengerInterface.update_child_processes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess", "modulename": "coproc.monitor.monitorprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess", "kind": "class", "doc": "<p>Simply receives data, processes it using worker_target, and sends the result back immediately.</p>\n"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.__init__", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">include_children</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">snapshot_seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">messenger</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span>,</span><span class=\"param\">\t<span class=\"n\">log_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">fig_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">save_fig_freq</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">processes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">notes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">monitorprocess</span><span class=\"o\">.</span><span class=\"n\">Note</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">monitorprocess</span><span class=\"o\">.</span><span class=\"n\">Stat</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">factory</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.pid", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.pid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.include_children", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.include_children", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.snapshot_seconds", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.snapshot_seconds", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.messenger", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.messenger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.prioritymessenger.PriorityMessenger"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.log_path", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.log_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.fig_path", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.fig_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pathlib.Path"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.save_fig_freq", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.save_fig_freq", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.processes", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.processes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[psutil.Process]"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.notes", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.notes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[coproc.monitor.monitorprocess.Note]"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.stats", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.stats", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[coproc.monitor.monitorprocess.Stat]"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.verbose", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.get_processes", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.get_processes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">include_monitor</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.root_process", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.root_process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">Process</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.MonitorWorkerProcess.stats_result", "modulename": "coproc.monitor.monitorprocess", "qualname": "MonitorWorkerProcess.stats_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">statsresult</span><span class=\"o\">.</span><span class=\"n\">StatsResult</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Note", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note", "kind": "class", "doc": "<p>Manages notes sent from host to worker to be logged/saved.</p>\n"}, {"fullname": "coproc.monitor.monitorprocess.Note.__init__", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">note</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">do_label</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">do_log</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">memory_usage</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ts</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span>)</span>"}, {"fullname": "coproc.monitor.monitorprocess.Note.pid", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.pid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitorprocess.Note.note", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.note", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "coproc.monitor.monitorprocess.Note.details", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.details", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "coproc.monitor.monitorprocess.Note.do_label", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.do_label", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitorprocess.Note.do_log", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.do_log", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "coproc.monitor.monitorprocess.Note.memory_usage", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.memory_usage", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitorprocess.Note.ts", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "coproc.monitor.monitorprocess.Note.log_str", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.log_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Note.long_log_str", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.long_log_str", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">show_ts</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_delta</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">show_mem</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Note.asdict", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.asdict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Note.format_memory", "modulename": "coproc.monitor.monitorprocess", "qualname": "Note.format_memory", "kind": "function", "doc": "<p>Get string representing memory quantity with correct units.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_bytes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">decimals</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.MemoryInfoNotAvailableError", "modulename": "coproc.monitor.monitorprocess", "qualname": "MemoryInfoNotAvailableError", "kind": "class", "doc": "<p>Common base class for all exceptions</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.monitor.monitorprocess.Stat", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat", "kind": "class", "doc": "<p>Records memory and cpu usage of target process.</p>\n"}, {"fullname": "coproc.monitor.monitorprocess.Stat.__init__", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">start_ts</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">end_ts</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">memory_info</span><span class=\"p\">:</span> <span class=\"s1\">&#39;psutil.pmem&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cpu</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "coproc.monitor.monitorprocess.Stat.pid", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.pid", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "coproc.monitor.monitorprocess.Stat.start_ts", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.start_ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "coproc.monitor.monitorprocess.Stat.end_ts", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.end_ts", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "coproc.monitor.monitorprocess.Stat.memory_info", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.memory_info", "kind": "variable", "doc": "<p></p>\n", "annotation": ": &#x27;psutil.pmem&#x27;"}, {"fullname": "coproc.monitor.monitorprocess.Stat.cpu", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.cpu", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "coproc.monitor.monitorprocess.Stat.capture_window", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.capture_window", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"n\">psutil</span><span class=\"o\">.</span><span class=\"n\">Process</span>, </span><span class=\"param\"><span class=\"n\">capture_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Stat.asdict", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.asdict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.monitorprocess.Stat.memory_usage", "modulename": "coproc.monitor.monitorprocess", "qualname": "Stat.memory_usage", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult", "modulename": "coproc.monitor.statsresult", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult.StatsResult", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult.StatsResult.__init__", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">stats</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">monitorprocess</span><span class=\"o\">.</span><span class=\"n\">Stat</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">notes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">monitor</span><span class=\"o\">.</span><span class=\"n\">monitorprocess</span><span class=\"o\">.</span><span class=\"n\">Note</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "coproc.monitor.statsresult.StatsResult.stats", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.stats", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[coproc.monitor.monitorprocess.Stat]"}, {"fullname": "coproc.monitor.statsresult.StatsResult.notes", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.notes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[coproc.monitor.monitorprocess.Note]"}, {"fullname": "coproc.monitor.statsresult.StatsResult.notes_df", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.notes_df", "kind": "function", "doc": "<p>Return notes as a dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.statsresult.StatsResult.stats_df", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.stats_df", "kind": "function", "doc": "<p>Return stats as a dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.statsresult.StatsResult.has_results", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.has_results", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult.StatsResult.num_stats", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.num_stats", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult.StatsResult.num_notes", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.num_notes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.monitor.statsresult.StatsResult.save_memory_plot", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.save_memory_plot", "kind": "function", "doc": "<p>Save plot of memory usage with notes.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">include_notes</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">save_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.monitor.statsresult.StatsResult.plot_memory", "modulename": "coproc.monitor.statsresult", "qualname": "StatsResult.plot_memory", "kind": "function", "doc": "<p>Plot memory usage against time, adding notes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">include_notes</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.old", "modulename": "coproc.old", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.old.WorkerResourceBaseException", "modulename": "coproc.old", "qualname": "WorkerResourceBaseException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "coproc.old.WorkerResourceBaseException.__init__", "modulename": "coproc.old", "qualname": "WorkerResourceBaseException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "coproc.old.NoWorkersAvailable", "modulename": "coproc.old", "qualname": "NoWorkersAvailable", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.NoWorkersAvailable.message", "modulename": "coproc.old", "qualname": "NoWorkersAvailable.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;This WorkerPool has no available resources. Either use as context manager or call .start().&#x27;"}, {"fullname": "coproc.old.WorkerDiedError", "modulename": "coproc.old", "qualname": "WorkerDiedError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.WorkerDiedError.message", "modulename": "coproc.old", "qualname": "WorkerDiedError.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Worker died before finishing.&#x27;"}, {"fullname": "coproc.old.WorkerIsDeadError", "modulename": "coproc.old", "qualname": "WorkerIsDeadError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.WorkerIsDeadError.message", "modulename": "coproc.old", "qualname": "WorkerIsDeadError.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Worker is already closed.&#x27;"}, {"fullname": "coproc.old.WorkerIsAliveError", "modulename": "coproc.old", "qualname": "WorkerIsAliveError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.WorkerIsAliveError.message", "modulename": "coproc.old", "qualname": "WorkerIsAliveError.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Cannot start worker because it is already alive.&#x27;"}, {"fullname": "coproc.old.UnidentifiedMessageReceivedError", "modulename": "coproc.old", "qualname": "UnidentifiedMessageReceivedError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.UnidentifiedMessageReceivedError.message", "modulename": "coproc.old", "qualname": "UnidentifiedMessageReceivedError.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;Worker received an invalid message.&#x27;"}, {"fullname": "coproc.old.WorkerResourceReceivedUnidentifiedMessage", "modulename": "coproc.old", "qualname": "WorkerResourceReceivedUnidentifiedMessage", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.WorkerResourceReceivedUnidentifiedMessage.message", "modulename": "coproc.old", "qualname": "WorkerResourceReceivedUnidentifiedMessage.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;This WorkerResource received an unidentified message.&#x27;"}, {"fullname": "coproc.old.WorkerHasNoUserFunctionError", "modulename": "coproc.old", "qualname": "WorkerHasNoUserFunctionError", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "WorkerResourceBaseException"}, {"fullname": "coproc.old.WorkerHasNoUserFunctionError.message", "modulename": "coproc.old", "qualname": "WorkerHasNoUserFunctionError.message", "kind": "variable", "doc": "<p></p>\n", "default_value": "&quot;Worker was not provided with a function. Either provide a function when the worker is created or update the worker&#x27;s function using .update_userfunc().&quot;"}, {"fullname": "coproc.old.UserFuncRaisedException", "modulename": "coproc.old", "qualname": "UserFuncRaisedException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "coproc.old.UserFuncRaisedException.__init__", "modulename": "coproc.old", "qualname": "UserFuncRaisedException.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">userfunc_exception</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "coproc.old.UserFuncRaisedException.userfunc_exception", "modulename": "coproc.old", "qualname": "UserFuncRaisedException.userfunc_exception", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.pool", "modulename": "coproc.pool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess", "modulename": "coproc.pool.dynamicmapprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessage", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessage", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess.UpdateUserFuncMessage", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "UpdateUserFuncMessage", "kind": "class", "doc": "<p>Send generic data to the other end of the pipe, using priority of sent messsage.\nNOTE: this is designed to allow users to access benefits of user-defined queue.</p>\n", "bases": "MapMessage"}, {"fullname": "coproc.pool.dynamicmapprocess.UpdateUserFuncMessage.__init__", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "UpdateUserFuncMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">user_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.pool.dynamicmapprocess.UpdateUserFuncMessage.user_func", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "UpdateUserFuncMessage.user_func", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[~SendPayloadType], ~RecvPayloadType]"}, {"fullname": "coproc.pool.dynamicmapprocess.UpdateUserFuncMessage.priority", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "UpdateUserFuncMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.pool.dynamicmapprocess.MapDataMessage", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapDataMessage", "kind": "class", "doc": "<p></p>\n", "bases": "MapMessage"}, {"fullname": "coproc.pool.dynamicmapprocess.MapDataMessage.__init__", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapDataMessage.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">payload</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span>, </span><span class=\"param\"><span class=\"n\">order</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">priority</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "coproc.pool.dynamicmapprocess.MapDataMessage.payload", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapDataMessage.payload", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~SendPayloadType"}, {"fullname": "coproc.pool.dynamicmapprocess.MapDataMessage.order", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapDataMessage.order", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "0"}, {"fullname": "coproc.pool.dynamicmapprocess.MapDataMessage.priority", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapDataMessage.priority", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float", "default_value": "0.0"}, {"fullname": "coproc.pool.dynamicmapprocess.WorkerTargetNotSetError", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "WorkerTargetNotSetError", "kind": "class", "doc": "<p>Common base class for all exceptions</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.pool.dynamicmapprocess.DynamicMapProcess", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "DynamicMapProcess", "kind": "class", "doc": "<p>Simply receives data, processes it using worker_target, and sends the result back immediately.</p>\n", "bases": "coproc.baseworkerprocess.BaseWorkerProcess, typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.pool.dynamicmapprocess.DynamicMapProcess.worker_target", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "DynamicMapProcess.worker_target", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Callable[[~SendPayloadType], ~RecvPayloadType]", "default_value": "None"}, {"fullname": "coproc.pool.dynamicmapprocess.DynamicMapProcess.verbose", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "DynamicMapProcess.verbose", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.__init__", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">messenger</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span></span>)</span>"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.messenger", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.messenger", "kind": "variable", "doc": "<p></p>\n", "annotation": ": coproc.messenger.prioritymessenger.PriorityMessenger"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.available", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.available", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.remaining", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.remaining", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.receive", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.receive", "kind": "function", "doc": "<p>Receive a single data message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.send", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.send", "kind": "function", "doc": "<p>Send a single data message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">SendPayloadType</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.dynamicmapprocess.MapMessenger.update_user_func", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapMessenger.update_user_func", "kind": "function", "doc": "<p>Update the user function that is called on each data message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.dynamicmapprocess.MapWorker", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapWorker", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess.MapWorker.__init__", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapWorker.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "coproc.pool.dynamicmapprocess.MapWorker.res", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapWorker.res", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.dynamicmapprocess.MapWorker.start_kwargs", "modulename": "coproc.pool.dynamicmapprocess", "qualname": "MapWorker.start_kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.pool", "modulename": "coproc.pool.pool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.pool.Pool", "modulename": "coproc.pool.pool", "qualname": "Pool", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.pool.Pool.__init__", "modulename": "coproc.pool.pool", "qualname": "Pool.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\tmessenger_type: Type[coproc.messenger.multimessenger.MultiMessenger] = &lt;class &#x27;coproc.messenger.multimessenger.MultiMessenger&#x27;&gt;</span>)</span>"}, {"fullname": "coproc.pool.pool.Pool.workers", "modulename": "coproc.pool.pool", "qualname": "Pool.workers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.pool.Pool.start_kwargs", "modulename": "coproc.pool.pool", "qualname": "Pool.start_kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "coproc.pool.pool.Pool.map", "modulename": "coproc.pool.pool", "qualname": "Pool.map", "kind": "function", "doc": "<p>Get results in order as a list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">datas</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.pool.Pool.map_unordered", "modulename": "coproc.pool.pool", "qualname": "Pool.map_unordered", "kind": "function", "doc": "<p>Return results as they become available.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">datas</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.pool.Pool.update_user_func", "modulename": "coproc.pool.pool", "qualname": "Pool.update_user_func", "kind": "function", "doc": "<p>Update the user function that is called on each data message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">RecvPayloadType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.pool.Pool.start", "modulename": "coproc.pool.pool", "qualname": "Pool.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.pool.Pool.join", "modulename": "coproc.pool.pool", "qualname": "Pool.join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.pool.pool.Pool.terminate", "modulename": "coproc.pool.pool", "qualname": "Pool.terminate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_alive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource", "modulename": "coproc.workerresource", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.workerresource.WorkerIsAlreadyAliveError", "modulename": "coproc.workerresource", "qualname": "WorkerIsAlreadyAliveError", "kind": "class", "doc": "<p>Used when trying to start a worker that is already alive.</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.workerresource.WorkerIsAlreadyDeadError", "modulename": "coproc.workerresource", "qualname": "WorkerIsAlreadyDeadError", "kind": "class", "doc": "<p>Used when trying to stop a worker that is already stopped.</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.workerresource.WorkerIsDeadError", "modulename": "coproc.workerresource", "qualname": "WorkerIsDeadError", "kind": "class", "doc": "<p>Used when accessing a resource that only exists when the worker is alive.</p>\n", "bases": "builtins.BaseException"}, {"fullname": "coproc.workerresource.WorkerResource", "modulename": "coproc.workerresource", "qualname": "WorkerResource", "kind": "class", "doc": "<p>Simplest worker resource.</p>\n", "bases": "typing.Generic[~SendPayloadType, ~RecvPayloadType]"}, {"fullname": "coproc.workerresource.WorkerResource.__init__", "modulename": "coproc.workerresource", "qualname": "WorkerResource.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">worker_process_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">baseworkerprocess</span><span class=\"o\">.</span><span class=\"n\">BaseWorkerProcess</span><span class=\"p\">]</span>,</span><span class=\"param\">\tmessenger_type: Type[coproc.messenger.prioritymessenger.PriorityMessenger] = &lt;class &#x27;coproc.messenger.prioritymessenger.PriorityMessenger&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;forkserver&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;spawn&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fork&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_proc</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Process</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">_messenger</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "coproc.workerresource.WorkerResource.worker_process_type", "modulename": "coproc.workerresource", "qualname": "WorkerResource.worker_process_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Type[coproc.baseworkerprocess.BaseWorkerProcess]"}, {"fullname": "coproc.workerresource.WorkerResource.messenger_type", "modulename": "coproc.workerresource", "qualname": "WorkerResource.messenger_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Type[coproc.messenger.prioritymessenger.PriorityMessenger]", "default_value": "&lt;class &#x27;coproc.messenger.prioritymessenger.PriorityMessenger&#x27;&gt;"}, {"fullname": "coproc.workerresource.WorkerResource.method", "modulename": "coproc.workerresource", "qualname": "WorkerResource.method", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Literal[&#x27;forkserver&#x27;, &#x27;spawn&#x27;, &#x27;fork&#x27;]]", "default_value": "None"}, {"fullname": "coproc.workerresource.WorkerResource.pid", "modulename": "coproc.workerresource", "qualname": "WorkerResource.pid", "kind": "variable", "doc": "<p>Get process id from worker.</p>\n"}, {"fullname": "coproc.workerresource.WorkerResource.start", "modulename": "coproc.workerresource", "qualname": "WorkerResource.start", "kind": "function", "doc": "<p>Start the process, throws WorkerIsAliveError if already alive.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">worker_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.join", "modulename": "coproc.workerresource", "qualname": "WorkerResource.join", "kind": "function", "doc": "<p>Request that the process close and then wait for it to die.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_alive</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.terminate", "modulename": "coproc.workerresource", "qualname": "WorkerResource.terminate", "kind": "function", "doc": "<p>Send terminate signal to worker.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_alive</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.is_alive", "modulename": "coproc.workerresource", "qualname": "WorkerResource.is_alive", "kind": "function", "doc": "<p>Get status of process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">arsg</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.check_process_exists", "modulename": "coproc.workerresource", "qualname": "WorkerResource.check_process_exists", "kind": "function", "doc": "<p>Check if process exists, and if not, raise error.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.process_exists", "modulename": "coproc.workerresource", "qualname": "WorkerResource.process_exists", "kind": "function", "doc": "<p>True if this resource has a process and messenger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.reset_process", "modulename": "coproc.workerresource", "qualname": "WorkerResource.reset_process", "kind": "function", "doc": "<p>Reset the process, but keep the messenger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">worker_kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.new_pair", "modulename": "coproc.workerresource", "qualname": "WorkerResource.new_pair", "kind": "function", "doc": "<p>Get a messenger, process pair. Best to refresh the whole thing.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">worker_kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span><span class=\"p\">,</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">ForkServerContext</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresource.WorkerResource.proc", "modulename": "coproc.workerresource", "qualname": "WorkerResource.proc", "kind": "variable", "doc": "<p>Get process.</p>\n", "annotation": ": multiprocessing.context.Process"}, {"fullname": "coproc.workerresource.WorkerResource.messenger", "modulename": "coproc.workerresource", "qualname": "WorkerResource.messenger", "kind": "variable", "doc": "<p>Get messenger.</p>\n", "annotation": ": coproc.messenger.prioritymessenger.PriorityMessenger"}, {"fullname": "coproc.workerresourcepool", "modulename": "coproc.workerresourcepool", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.__init__", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">workers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">workerresource</span><span class=\"o\">.</span><span class=\"n\">WorkerResource</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.workers", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.workers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": List[coproc.workerresource.WorkerResource]"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.start_kwargs", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.start_kwargs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Dict[str, Any]"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.new", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.new", "kind": "function", "doc": "<p>Create new workerResources and track start kwargs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">worker_process_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">baseworkerprocess</span><span class=\"o\">.</span><span class=\"n\">BaseWorkerProcess</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">messenger_type</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">prioritymessenger</span><span class=\"o\">.</span><span class=\"n\">PriorityMessenger</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">start_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">workerresourcepool</span><span class=\"o\">.</span><span class=\"n\">WorkerResourcePool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.set_start_kwargs", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.set_start_kwargs", "kind": "function", "doc": "<p>Change process start kwargs after constructing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.start", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.join", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.join", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.terminate", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.terminate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_alive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.is_alive", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.is_alive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.wait_until_dead", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.wait_until_dead", "kind": "function", "doc": "<p>Wait until all workers are dead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.apply_to_workers", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.apply_to_workers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">workerresource</span><span class=\"o\">.</span><span class=\"n\">WorkerResource</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "coproc.workerresourcepool.WorkerResourcePool.map_messages", "modulename": "coproc.workerresourcepool", "qualname": "WorkerResourcePool.map_messages", "kind": "function", "doc": "<p>Feed data_iter to workers and receive results as soon as they are done.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_iter</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">SendPayloadType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">channel_id</span><span class=\"p\">:</span> <span class=\"n\">coproc</span><span class=\"o\">.</span><span class=\"n\">messenger</span><span class=\"o\">.</span><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">multiqueue</span><span class=\"o\">.</span><span class=\"n\">ChannelID</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing.Generator[RecvPayloadType]&#39;</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();